	
	.enabl	LC, AMA
	.asect
	.=1000

@include acommon.mac

Start:	mtps	#200
	mov	#1000, SP
	mov	@#004, -(SP)
	mov	@#060, -(SP)
	mov	@#274, -(SP)
	mov	@#100, -(SP)
	mov	@#102, -(SP)
	mov	#Stop, @#004
	clr	@#100				; use this as flag for BK0011(M)
	cmpb	@#177717, #300
	bne	10$
	clr	@#177662			; BK0011(M) screen 5, palette 0, vsync on
	mov	#C_RAM_BANKS54, @#177716	; BK0011(M) usual mem map for andos
	mov	#VsyInt, @#100			; BK0011(M) have vsync
	mov	#200, @#102			; BK0011(M) let it be with disabled interrupts
10$:	; keyboard
	tst	@#177662
	mov	#KbdInt, @#060
	mov	#KbdInt, @#274
	; screen
	mov	#1330, @#177664
	.if NDF LOA_DONT_CLRSCR
	mov	#C_VADDR, R0
	mov	#40000/2, R3
	clr	(R0)+
	sob	R3, .-2
	.endc
	; timer
	mov	#740, @#177706			; full screen time (BK0010)
	mov	#20, @#177712			; start timer, max speed
	; unpack main code
	mov	#2000, R1			; addr of [length] [data..]
	mov	(R1)+, R3			; packed length in bytes
	add	R3, R1				; end+1 of packed data
	mov	#40000, R0			; relocate to top of bank 0
	movb	-(R1), -(R0)			; +
	sob	R3, .-2				; +
	tst	-(R1)				; now R1 must be 2000
	call	Unpack				; R0 src, R1 dst
	; clean up RAM to bank 0 end
20$:	clrb	(R1)+
	cmp	R1, #40000
	blo	20$
	; all is set, go
	mtps	#0
	clr	R0				; wait a bit for some interrupts
	sob	R0, .				; (especially keyboard) to happen
	clr	KeyCur				; now can clear current key
	jmp	@#2000


; default exit
Exit:	mtps	#200
	tst	@#100				; is it BK0011(M)?
	beq	10$
	movb	#^B01001111, @#177663		; BK0011(M) screen buf 5, disable vsync, palette 15
	mov	#C_RAM_BANKS54, @#177716	; BK0011(M) usual mem map for andos
10$:	mov	#1330, @#177664			; set scroll to 0
	mov	#1000-12, SP			; restore vectors
	mov	(SP)+, @#102
	mov	(SP)+, @#100
	mov	(SP)+, @#274
	mov	(SP)+, @#060
	mov	(SP)+, @#004
	mov	#100004, R0			; check 'standard' ROM at 100000
	mov	-(R0), R1
	add	-(R0), R1
	cmp	R1, #167+254
	beq	99$				; seems we have it
	mov	@#177716, R0			; else go to reset addr
	clrb	R0
99$:	jmp	(R0)


; stop placeholder
Stop:	jmp	Exit


; keyboard int
KbdInt:	mov	@#177662, (PC)+
KeyCur:	.word	0
KeyUsr:	nop					; can add something here
	nop
	rti


; vsync int
VsyInt:	mov	#1200, @#177706			; BK0011(M) full screen time
	mov	#20, @#177712			; start timer, max speed
	inc	(PC)+
VsyCnt:	.word	0
VsyUsr:	nop					; can add something here
	nop
	rti


; zx0 unpacker by reddie
; R0 - source, R1 - dest
Unpack:	clr	R2
	movb	#200, R3
	sxt	R5
10$:	call	50$
	movb	(R0)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcs	30$
	call	50$
20$:	mov	R1, R4
	add	R5, R4
	movb	(R4)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcc	10$
30$:	mov	#-2, R2
	call	60$
	incb	R2
	bne	.+4
40$:	return
	swab	R2
	mov	R2, R5
	clrb	R5
	bisb	(R0)+, R5
	asr	R5
	mov	#1, R2
	bcs	.+6
	call	80$
	inc	R2
	br	20$
50$:	incb	R2
60$:	aslb	R3
	bne	70$
	movb	(R0)+, R3
	rolb	R3
70$:	bcs	40$
80$:	aslb	R3
	rol	R2
	br	60$
 

	; main code is starting from 2000
	; make sure it have small space for stack on BK0011(M) tape loader
	.if LT 1770-.
	.error loader exceeding its limits
	.endc
	.=2000
