	.title	KOS
	.enabl	LC

; KOSI4KA demo from Manwe
; FPS counter added

	.asect
	.=2000	; BK-0011M - use 2000 as start addr

@include acommon.mac

Start:	mtps	#200
	mov	#1000, SP
	mov	@#004, -(SP)
	mov	#Exit, @#004
	; BK0011(M)
	cmpb	@#177717, #300
	bne	10$
	clr	@#177662			; screen 5, palette 0, vsync on
	mov	#177663, Exit+4			; set vsync disable before exit
	mov	#C_RAM_BANKS54, @#177716	; banks 5 4
10$:	; screen
	mov	#1330, @#177664
	mov	#End, R0
	mov	#100000-End/2, R3
	clr	(R0)+
	sob	R3, .-2
	; keyboard
	tst	@#177662
	mov	@#060, -(SP)
	mov	@#274, -(SP)
	mov	#KbdInt, @#060
	mov	#KbdInt, @#274
	; vsync interrupt
	mov	@#100, -(SP)
	mov	@#102, -(SP)
	mov	#VsyInt, @#100
	mov	#200, @#102
	; all is set, go
	mtps	#0
	jmp	Speed

Exit:	; exit
	movb	#^B01000000, @#End		; placeholder for disable vsync in BK0011(M)
	tst	@#177662
	mtps	#200
	mov	#1000-10., SP
	mov	(SP)+, @#102
	mov	(SP)+, @#100
	mov	(SP)+, @#274
	mov	(SP)+, @#060
	mov	(SP)+, @#004
	jmp	@#100000


; keyboard int
KbdInt:	tst	@#177662
	rti


; vsync int - show fps
VsyInt:	inc	Tick50
	cmp	Tick50, #500.
	blo	99$
	mov	R0, -(SP)
	mov	R1, -(SP)
	mov	R2, -(SP)
	mov	R5, -(SP)
	mov	Frames, R0
	call	Digi3
	call	PriStr
	clr	Tick50
	clr	Frames
	mov	(SP)+, R5
	mov	(SP)+, R2
	mov	(SP)+, R1
	mov	(SP)+, R0
99$:	rti

; print string
PriStr:	mov	#MsgFps, R0
	mov	#1*C_SCRWID+C_VADDR, R5
	mov	#64., R2		; vaddr addition
10$:	movb	(R0)+, R1		; get text byte
	beq	99$			; zero - exit
	sub	#'0, R1			; relative to '0'
	asl	R1			; *8 bytes (character font size)
	asl	R1
	asl	R1
	add	#SprNumbers45, R1	; R1 = font data
	.rept	8.			; out character
	movb	(R1)+, (R5)
	add	R2, R5
	.endr
	sub	#8.*C_SCRWID-1, R5	; advance vaddr
	br	10$
99$:	return 

; put 2.1 digits string to MsgFp8, R0 - number
Digi3:	mov	#MsgFps, R5
	cmp	R0, #999.
	blos	10$
	mov	#999., R0
10$:	mov	#100., R2
	call	100$
	mov	#10., R2
	call	100$
	inc	R5
	add	#'0, R0
	movb	R0, (R5)
	return
100$:	mov	#'0, R1
110$:	cmp	R0, R2
	blo	120$
	sub	R2, R0
	inc	R1
	br	110$
120$:	movb	R1, (R5)+
	return

; data
Frames:	.word	0
Lines:	.word	0
Tick50:	.word	0
MsgFps:	.asciz	"00:0"
	.even

; 4x5 numbers (aligned by 8 bytes)
SprNumbers45:
	.byte	^B00111111, ^B00110011, ^B00110011, ^B00110011, ^B00111111, 0, 0, 0
	.byte	^B00001100, ^B00001100, ^B00001100, ^B00001100, ^B00001100, 0, 0, 0
	.byte	^B00111111, ^B00110000, ^B00111111, ^B00000011, ^B00111111, 0, 0, 0
	.byte	^B00111111, ^B00110000, ^B00111100, ^B00110000, ^B00111111, 0, 0, 0
	.byte	^B00110011, ^B00110011, ^B00111111, ^B00110000, ^B00110000, 0, 0, 0
	.byte	^B00111111, ^B00000011, ^B00111111, ^B00110000, ^B00111111, 0, 0, 0
	.byte	^B00111111, ^B00000011, ^B00111111, ^B00110011, ^B00111111, 0, 0, 0
	.byte	^B00111111, ^B00110000, ^B00110000, ^B00110000, ^B00110000, 0, 0, 0
	.byte	^B00111111, ^B00110011, ^B00111111, ^B00110011, ^B00111111, 0, 0, 0
	.byte	^B00111111, ^B00110011, ^B00111111, ^B00110000, ^B00111111, 0, 0, 0 
	.byte	^B00000000, ^B00000000, ^B00000000, ^B00000000, ^B00001100, 0, 0, 0
	.even 


; ////////////////////////////////////////////////////////////////////////////////////
; // Manwe kos demo code here
; ////////////////////////////////////////////////////////////////////////////////////

TablSize	= 64.
Angle		= 16.				; Cos offset
Variable	= Accums+6 

Speed:	br	Begin				; Y
	.WORD	36543, 1321			; timer2, timer1
Accums: 

Begin:	; Clone sine table
	MOV	#Tabl+32., R1			; pointer to sine table
	MOV	#32., R2
10$:	MOVB	Tabl-1(R2), (R1)+
	SOB	R2, 10$

Loop:	mov	#64., Lines			; rendering lines count
	MOV	#Accums, R3
	CLR	(R3)+				; clear accums
	CLR	(R3)+
	TST	(R3)+
	MOV	#100, R0			; mask
Direct:	INCB	(R3)				; default Y
	BNE	10$
	XOR	R0, Direct			; DEC opcode: 5313, INC opcode: 5213
10$:	MOV	(R3)+, (R3)			; set Y
	MOV	(R3)+, (R3)			; set timer2
	MOV	#C_SCRWID+C_VADDR, R0		; screen address (2nd line)

; render twister to screen
Render:	MOV	#Speed, R4
	MOV	#3, R3
10$:	ADD	(R4)+, 4(R4)			; add speed to accum
	ADC	14(R4)				; increment variable
	SOB	R3, 10$

	MOV	#Variable+6, R3			; pointer to variable array
	MOV	(R3), R4			; get timer 1
	CALL	Sin
	SWAB	R5
	ASL	R5
	MOV	R5, Speed			; Y speed

	MOV	-(R3), R4			; get timer 2
	CALL	Sin
	ADD	#32., R5
	ASR	R5
	ASR	R5
	MOV	R5, R2				; horisontal shift

	MOV	-(R3), R4			; get Y

	MOV	R0, -(SP)			; set maximum
	MOV	R0, -(SP)
	ADD	#77, (SP)			; set minimum
	MOV	#4, R3
30$:	CALL	Sin				; R5=Sin(R4)
	MOV	R5, R1
	ASR	R1				; left coordinate
	ADD	#Angle, R4			; 90 degrees offset
	CALL	Sin				; R5=Sin(R4)
	ASR	R5				; right coordinate
	SUB	R1, R5				; length
	BLE	70$
	BIC	#77, R0				; new screen line
	ADD	R2, R0				; horisontal shift
	ADD	R1, R0
	CMP	R0, (SP)			; minimum
	BGT	40$
	MOV	R0, (SP)			; set new minimum
40$:	MOVB	Color-1(R3), R1			; read colour
50$:	MOVB	R1, (R0)+
	SOB	R5, 50$
	CMP	R0, 2(SP)			; maximum
	BLOS	60$
	MOV	R0, 2(SP)			; set new maximum
60$:	BICB	#340, -(R0)			; draw border
70$:	SOB	R3, 30$
	MOV	(SP)+, R5			; get minimum
	MOVB	R3, -(R5)			; erase left pixels
	MOVB	R3, -(R5)
	MOVB	R3, -(R5)
	MOVB	R3, -(R5)
	MOV	(SP)+, R5			; get maxumum
	MOVB	R3, (R5)+			; erase right pixels
	MOVB	R3, (R5)+
	MOV	R3, (R5)

	ADD	#4*C_SCRWID, R0			; next line to render (every 4th screen line)
	dec	Lines
	bne	Render

	inc	Frames
	br	Loop

; Sinus
; input: R4 - angle
; outpu: R5 - sinus
Sin:	MOV	R4, R5
	BIC	#177700, R5
	MOVB	Tabl(R5), R5
	return

Color:	.BYTE 231,167,252,273

Tabl:	.BYTE 63.,62.,62.,61.,60.,58.,56.,54.,52.,50.,48.,45.,42.,39.,37.,33.
	.BYTE 31.,28.,25.,22.,19.,17.,14.,12.,10.,8.,6.,4.,3.,2.,2.,1.
 

End:	.end Start