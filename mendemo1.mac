	.title	MENDE1

; demo for menestrel

LOA_DONT_CLRSCR =: 1
@include aloader.mac

Main:	; vsync int off for 11M
	tst	@#100
	beq	02$
	mov	#40000, @#177662
02$:	; modify exit by stop for stop VI's
	mov	#MainStop, Stop+2

	; init
	call	IniVis
	mov	#Screen1Data, R0
	mov	#C_VADDR, R1
	call	Unpack
	call	PrepareRoll

; play patterns
PlayPatterns:
	mov	#MusicStart, PatAddr
Loop:	; play one pattern
	clr	Chan0Wait
	clr	Chan1Wait
	clr	Chan2Wait
	mov	@PatAddr, R5
	bne	10$
	add	#2, PatAddr
	mov	@PatAddr, PatAddr
	br	Loop
10$:	mov	(R5)+, Chan1Addr
	mov	(R5)+, Chan2Addr
	mov	R5, Chan0Addr
	clr	PatEnd
	call	PlayChannels
	add	#2, PatAddr
	br	Loop

; play one pattern, 3 channels
PlayChannels:
	mov	#Chan0Wait, R5
	call	PlayChannel
	mov	#Chan1Wait, R5
	call	PlayChannel
	mov	#Chan2Wait, R5
	call	PlayChannel
	; end of pattern?
	tst	PatEnd
	beq	10$
	return
10$:	; wait 1/50 sec
	mov	#177710, R0
	cmp	#200, (R0)
	bne	.-4
	; draw notes roll
	call	NotesRoll
	; keypress?
	tst	KeyCur
	beq	PlayChannels
	jmp	MainStop

; R5 - #ChanXWait
PlayChannel:
	; test pattern end
	tst	PatEnd
	bne	99$
	; test wait ticks
	dec	(R5)
	bpl	99$
	clr	(R5)
	; get current playing note (or silence)
	mov	2(R5), R1
	; convert to 1MHz divisor
	asl	R1
	mov	NoteDivs(R1), R1
	; set chip/counter and play note (or silence)
	mov	4(R5), R2
	call	SetNot
	; next note data
	movb	@6(R5), R4
	bmi	10$				; it's pause or end of pattern
	; normal note
	mov	R4, 2(R5)			; set next note
	br	90$
10$:	bic	#^B1111111110000000, R4		; leave 7 bits
	cmp	#^B0000000001111111, R4		; is it end of pattern?
	bne	20$
	; end of pattern
	inc	PatEnd
	return
20$:	; pause
	mov	R4, (R5)
90$:	; advance notes addr
	inc	6(R5)
99$:	return


; R1 - divisor, R2 - channel (upper byte)
; info: on real VI53 you barely able to hear anything with divisor lower than 10 (except harmonics at very low level)
;       but here to be GID-compatible (tm) we will reinit counter instead
SetNot:	mov	R2, R0
	; assume that divisor lower than 10(8) is silence
	cmp	#10, R1
	blo	10$
	; silence channel then
	mov	R0, R1
	asr	R0
	asr	R0
	bis	R1, R0
	bic	#^B1111001100111111, R0
	bis	#^B1000001100110110, R0
	br	Out14
10$:	; normal frequency
	bisb	R1, R0
	swab	R1
	call	Out14
	clrb	R0
	bisb	R1, R0
; set inverted R0 to 177714
Out14:	com	R0
	bis	#^B0001000000000000, R0		; ~WR low
	mov	R0, @#177714
	bic	#^B0001000000000000, R0		; ~WR high
	mov	R0, @#177714
	com	R0
	return


; init VI53 counters
IniVis:	mov	#177714, R0
	mov	#^C^B0000001100110110, (R0)	; both chips, counter 0, mode 3 (~WR low)
	mov	#^C^B0001001100110110, (R0)	; ~WR high
	mov	#^C^B0000001101110110, (R0)
	mov	#^C^B0001001101110110, (R0)
	mov	#^C^B0000001110110110, (R0)
	mov	#^C^B0001001110110110, (R0)
	return


; print something with emt's
; R0 - msg addr
Print:	cmp	@#100000, #167
	beq	10$
	cmpb	@#177717, #300
	bne	10$
	emt	65
	return
10$:	mov	R1, -(SP)
	mov	R2, -(SP)
	mov	R0, R1
	clr	R2
	emt	20
	mov	(SP)+, R1
	mov	(SP)+, R2
	return


; stop counters (init VI's) and exit
MainStop:
	call	IniVis
	jmp	Exit


; variables
PatEnd:		.word	0
PatAddr:	.word	0

Chan0Wait:	.word	0
Chan0Note:	.word	2
Chan0Chip:	.word	0*256.+C_VI53_12
Chan0Addr:	.word	0

Chan1Wait:	.word	0
Chan1Note:	.word	2
Chan1Chip:	.word	1*256.+C_VI53_12
Chan1Addr:	.word	0

Chan2Wait:	.word	0
Chan2Note:	.word	2
Chan2Chip:	.word	2*256.+C_VI53_12
Chan2Addr:	.word	0

C_LINE_Y =: 118.*C_SCRWID+C_VADDR
C_LINES  =: 64.

; prepare scrolling notes
PrepareRoll:
	; clear buffer (with all ram to video addr)
	mov	#Screen1Data, R5
10$:	clr	(R5)+
	cmp	R5, #C_VADDR
	blo	10$
	; draw rectangle
	mov	#C_LINE_Y-C_SCRWID+6., R5
	mov	#C_LINES+1*C_SCRWID+C_LINE_Y+6., R4
	mov	#C_SCRWID-12., R3
20$:	movb	#^B10001000, (R5)+
	movb	#^B10001000, (R4)+
	sob	R3, 20$
	return

; draw and roll notes
; they are positioned not correctly but it's just for demo
NotesRoll:
	; use title data as buffer
	mov	#Screen1Data, R5
	; chan 0 - synth arpedggio
	clr	R1
	mov	Chan0Note, R0
	beq	10$
	add	#C_LINE_Y-32., R0
	movb	#^B00111111, R1
10$:	mov	R0, (R5)+			; addr
	mov	R1, (R5)+			; color
	; chan 1 - bass & drum
	clr	R1
	mov	Chan1Note, R0
	beq	20$
	add	#C_LINE_Y-13., R0
	movb	#^B00010101, R1
20$:	mov	R0, (R5)+
	mov	R1, (R5)+
	; chan 2 - guitar
	mov	Chan2Note, R0
	beq	30$
	add	#C_LINE_Y-18., R0
	cmp	R0, #C_LINE_Y+56.
	blos	22$
	mov	#C_LINE_Y+56., R0
22$:	movb	#^B00101010, R1
30$:	mov	R0, (R5)+
	mov	R1, (R5)+
	; notes are set
ScrollThen:
	mov	#C_LINES*12.+Screen1Data, R5
	mov	R5, R4
	mov	#3., R2
	; clear bottom line
02$:	mov	-(R5), R1
	mov	-(R5), R0
	beq	04$
	clrb	(R0)
04$:	sob	R2, 02$
	; scroll lines
	mov	#C_LINES-1, R3
10$:	mov	#3., R2
20$:	mov	-(R5), R1			; color
	mov	R1, -(R4)
	mov	-(R5), R0			; addr
	mov	R0, -(R4)
	beq	30$
	add	#C_SCRWID, (R4)
	movb	R1, C_SCRWID(R0)
	clrb	(R0)
30$:	sob	R2, 20$
	sob	R3, 10$
	return


; music data
@include ./music/music3.mac

; screen image data
@include mendemo1_grf.mac


End:	.end	Start
